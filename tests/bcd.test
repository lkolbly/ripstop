### CODE

module bcd(bits<4> base, bits<4> a, bits<4> b, bit carryin) -> (bits<4> c, bit carryout) {
    bits<5> intermediate_sum;
    intermediate_sum[t] = (1'd0 ++ a[t]) + (1'd0 ++ b[t]) + (4'd0 ++ carryin[t]);
    if intermediate_sum[t] >= (1'd0 ++ base[t]) {
        c[t] = (intermediate_sum[t] - (1'd0 ++ base[t]))[3:0];
        carryout[t] = 1;
    } else {
        c[t] = intermediate_sum[t][3:0];
        carryout[t] = 0;
    }
}

### DATA
rst,base in 4,a in 4,b in 4,carryin in 1,c out 4,carryout out 1
1,10,x,x,x,x,x
0,10,5,6,0,1,1
0,10,2,3,0,5,0
0,10,2,3,1,6,0
0,10,5,4,0,9,0
0,10,5,4,1,0,1
0,11,5,4,1,10,0
