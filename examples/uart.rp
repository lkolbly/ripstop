module uart_rx(bit rx, bits<16> prescaler) -> (bit data_valid, bits<8> data) {
    bits<4> state;
    bits<16> countdown;
    bits<3> bitsleft;

    state[0] = 4'd0;
    data_valid[0] = 1'd0;

    if state[t-1] == 4'd0 {
        // Idle
        if rx[t-1] == 4'd0 {
            // RX has gone low, start counting to the center of the bit time
            // Note that we only count a half bit-time
            countdown[t] = 1'd0 ++ prescaler[t-1][15:1];
            state[t] = 4'd1;
        }
    } else if state[t-1] == 4'd1 {
        // Start bit
        if countdown[t-1] == 16'd0 {
            // We're at the middle of the start bit, wait for the first data bit
            countdown[t] = prescaler[t-1];
            state[t] = 4'd2;
            bitsleft[t] = 3'd7;
        } else {
            countdown[t] = countdown[t-1] - 16'd1;
        }
    } else if state[t-1] == 4'd2 {
        // Getting data
        if countdown[t-1] == 16'd0 {
            if bitsleft[t-1] == 3'd0 {
                // Go wait for the stop bit
                state[t] = 4'd3;
                countdown[t] = prescaler[t];
                data[t] = data[t-1][6:0] ++ rx[t];
                data_valid[t] = 1'd1;
            } else {
                // Grab this data bit, wait for the next one
                countdown[t] = prescaler[t-1];
                data[t] = data[t-1][6:0] ++ rx[t-1];
                bitsleft[t] = bitsleft[t-1] - 3'd1;
            }
        } else {
            countdown[t] = countdown[t-1] - 16'd1;
        }
    } else if state[t-1] == 4'd3 {
        data_valid[t] = 1'd0;
        if countdown[t-1] == 16'd0 {
            state[t] = 4'd0;
        } else {
            countdown[t] = countdown[t-1] - 16'd1;
        }
    }
}

module uart_tx(bit data_in_valid, bits<8> data_in, bits<16> prescaler) -> (bit ready, bit tx) {
    bits<4> state;
    bits<4> next_state;
    bits<16> countdown;
    bits<8> data;
    bits<3> bitsleft;

    state[0] = 4'd0;

    ready[t] = state[t-1] == 4'd0;

    if state[t-1] == 4'd0 {
        // Idle
        tx[t] = 1'd1;
        if data_in_valid[t-1] {
            state[t] = 4'd1;
            countdown[t] = prescaler[t-1];
            data[t] = data_in[t-1];
        }
    } else if state[t-1] == 4'd1 {
        // Start bit
        tx[t] = 1'd0;
        if countdown[t-1] == 16'd0 {
            countdown[t] = prescaler[t-1];
            state[t] = 4'd2;
            bitsleft[t] = 3'd7;
        } else {
            countdown[t] = countdown[t-1] - 16'd1;
        }
    } else if state[t-1] == 4'd2 {
        // Data
        tx[t] = data[t][7];
        if countdown[t-1] == 16'd0 {
            if bitsleft[t-1] == 3'd0 {
                // Move to the stop bit
                countdown[t] = prescaler[t-1];
                state[t] = 4'd3;
            } else {
                // Do the next data bit
                countdown[t] = prescaler[t-1];
                data[t] = data[t-1][6:0] ++ 1'd0;
                bitsleft[t] = bitsleft[t-1] - 3'd1;
            }
        } else {
            countdown[t] = countdown[t-1] - 16'd1;
        }
    } else if state[t-1] == 4'd3 {
        // Stop bit
        tx[t] = 1'd1;
        if countdown[t-1] == 16'd0 {
            state[t] = 4'd0;
        } else {
            countdown[t] = countdown[t-1] - 16'd1;
        }
    }
}

module repeater() -> (bit txd) {
    instantiate uart_tx as transmitter;
    transmitter.data_in_valid[0] = 1'd0; // TODO: If this isn't here, we get a bunch of undefines. Figure out why/whether that's expected.
    transmitter.data_in_valid[t] = transmitter.ready[t-1];
    transmitter.data_in[t] = 8'd65; // 'A', I think?
    transmitter.prescaler[t] = 16'd10;
    txd[t] = transmitter.tx[t];
}

module doubleecho(bit rxd, bits<16> prescaler) -> (bit txd) {
    instantiate uart_tx as tx;
    instantiate uart_rx as rx;

    tx.data_in_valid[0] = 1'd0;

    tx.prescaler[t] = prescaler[t];
    rx.prescaler[t] = prescaler[t];

    txd[t] = tx.tx[t];
    rx.rx[t] = rxd[t];

    bits<8> data;
    bits<2> tx_count_remaining;
    tx_count_remaining[0] = 2'd0;

    tx.data_in[t] = data[t];

    if tx_count_remaining[t-1] == 1'd0 {
        tx.data_in_valid[t] = 1'd0;
        if rx.data_valid[t-1] {
            data[t] = rx.data[t-1];
            tx_count_remaining[t] = 2'd3;
        }
    } else {
        if tx.ready[t-1] {
            tx_count_remaining[t] = tx_count_remaining[t-1] - 2'd1;
            tx.data_in_valid[t] = 1'd1;
        } else {
            tx.data_in_valid[t] = 1'd0;
        }
    }
}


/*module uart_tx(bit data_in_valid, bits<8> data_in, bits<16> prescaler) -> (bit ready, bit tx) {
    bits<4> state;
    bits<4> next_state;
    bits<16> countdown;
    bits<8> data;
    bits<3> bitsleft;

    ready[t] = state[t-1] == 4'd0;

    if countdown[t-1] == 16'd1 {
        countdown[t] = 16'd0;
        state[t] = next_state[t-1];
    } else if countdown[t-1] > 16'd1 {
        countdown[t] = countdown[t-1] - 16'd1;
    } else if state[t-1] == 4'd0 {
        // Idle
        if data_in_valid[t] {
            // Set the start bit, move to data TX
            next_state[t] = 4'd1; // Start bit
            countdown[t] = prescaler[t];
            data[t] = data_in[t];
            tx[t] = 1'd0;
            bitsleft[t] = 3'd7;
        } else {
            tx[t] = 1'd1;
        }
    } else if state[t-1] == 4'd1 {
        // Data TX state
        if bitsleft[t-1] == 3'd0 {
            // Send the stop bit, then transition to idle
            tx[t] = 1'd1;
            next_state[t] = 4'd0;
            countdown[t] = prescaler[t];
        } else {
            // Send the next bit
            tx[t] = data[0];
            data[t] = 1'd0 ++ data[t-1][7:1];
            bitsleft[t] = bitsleft[t-1] - 3'd1;
            next_state[t] = 4'd1;
            countdown[t] = prescaler[t];
        }
    }
}*/
