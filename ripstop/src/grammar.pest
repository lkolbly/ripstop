document = { SOI ~ (module_declaration | extern_module_declaration | struct_definition)* ~ EOI }
module_declaration = { doc_comment* ~ "module" ~ name ~ variable_declaration_list ~ "->" ~ variable_declaration_list ~ block }
extern_module_declaration = { doc_comment* ~ "extern" ~ "module" ~ name ~ variable_declaration_list ~ "->" ~ variable_declaration_list ~ ";" }

doc_comment = @{ "///" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

name = ${ (ASCII_ALPHA | "_")+ ~ (ASCII_ALPHANUMERIC | "_")* }

variable_path_list = { name ~ ("." ~ name)* }

variable_declaration_list = { "(" ~ (variable_declaration)* ~ ("," ~ variable_declaration)* ~ ")" }
variable_declaration = { type_then_space ~ name }
type_then_space = ${ variable_type ~ WHITESPACE }
variable_type = { generic_variable_type | name }
generic_variable_type = { name ~ "<" ~ number_literal ~ ">" }

struct_definition = { doc_comment* ~ "struct" ~ name ~ "{" ~ struct_variable+ ~ "}" }
struct_variable = { variable_declaration ~ ";" }

block = _{ "{" ~ statement* ~ "}" }

indexed_variable = { variable_path_list ~ "[" ~ variable_index ~ "]" }
variable_index_relative = { "t" ~ (( addition | subtraction ) ~ number_literal)? }
variable_index_absolute = { signed_integer }
variable_index = _{ variable_index_relative | variable_index_absolute }

range = { pos_integer ~ (":" ~ pos_integer)? }
bits_index = { "[" ~ range ~ "]" }

statement = _{ assignment | declaration_statement | conditional | instantiate_statement }
declaration_statement = _{ variable_declaration ~ ";" }
assignment = { indexed_variable ~ "=" ~ expression ~ ";" }
expression = _{ binary_operation | index_expression | indexed_variable | unary_operation | parenthetical_expression | number_literal }
parenthetical_expression = _{ "(" ~ expression ~ ")" }

conditional = { "if" ~ expression ~ conditional_block ~ ("else" ~ "if" ~ expression ~ conditional_block)* ~ ("else" ~ conditional_block)? }
conditional_block = { "{" ~ conditional_statement* ~ "}" }
conditional_statement = _{ assignment | conditional }

instantiate_statement = { "instantiate" ~ name ~ "as" ~ name ~ ";" }

index_expression = { index_operand ~ bits_index }
index_operand = _{ parenthetical_expression | indexed_variable }

unary_operand = _{ parenthetical_expression | index_expression | indexed_variable | unary_operation }
unary_operation = { unary_operator ~ unary_operand }
unary_operator = { bitwise_inverse }
bitwise_inverse = { "~" }

binary_operand = _{ parenthetical_expression | index_expression | indexed_variable | unary_operation | number_literal }
binary_operation = { binary_operand ~ (binary_operator ~ binary_operand)+ }
binary_operator = _{ concatenate | addition | subtraction | bitwise_and | bitwise_or | bitwise_xor | equal | notequal | greater_eq | less_eq | greater | less }
addition = { "+" }
subtraction = { "-" }
bitwise_and = { "&" }
bitwise_xor = { "^" }
bitwise_or = { "|" }
equal = { "==" }
notequal = { "!=" }
greater = { ">" }
less = { "<" }
greater_eq = { ">=" }
less_eq = { "<=" }
concatenate = { "++" }

signed_integer = { (( addition | subtraction ) ~ pos_integer) | pos_integer }

pos_integer = { ASCII_DIGIT+ }
number_literal_value_digit = ${ ASCII_DIGIT | "_" | "a" | "b" | "c" | "d" | "e" | "f" }
number_literal_value = ${ number_literal_value_digit+ }
number_literal_bits = { ASCII_DIGIT+ }
number_literal_base = { "b" | "d" | "h" | "o" }
full_number_literal = { number_literal_bits ~ "'" ~ number_literal_base ~ number_literal_value }
number_literal = { full_number_literal | pos_integer }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ (!"\n" ~ ANY)* }
